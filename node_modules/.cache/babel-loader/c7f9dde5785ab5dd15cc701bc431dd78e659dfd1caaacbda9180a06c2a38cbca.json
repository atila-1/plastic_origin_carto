{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport mapboxgl from 'mapbox-gl';\nconst TrashLayer = props => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const baseURL = 'https://api-dev-plastico.westeurope.cloudapp.azure.com/v1/geojson/-1.05/43.47/-1.0/43.75?entity_type=trash';\n  const [zoom, setZoom] = useState(5);\n  useEffect(() => {\n    if (!props.map) return;\n    props.map.on('move', () => {\n      setZoom(props.map.getZoom().toFixed(2));\n    });\n  }, [props.map]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(baseURL);\n        setData(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error(error);\n        setLoading(true);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // add source\n  useEffect(() => {\n    if (loading || !data || !props.map) return;\n    if (!props.map.getLayer('data')) {\n      props.map.addSource(\"data\", {\n        \"type\": \"geojson\",\n        \"data\": data\n      });\n    } else {\n      props.map.getSource('data').setData(data);\n    }\n  }, [data]);\n\n  // update layer\n  useEffect(() => {\n    console.log(\"test\");\n    if (loading || !data || !props.map) return;\n    if (!props.map.getLayer('data')) {\n      props.map.addLayer({\n        \"id\": \"data\",\n        \"type\": \"heatmap\",\n        \"source\": \"data\",\n        \"layout\": {}\n      });\n    }\n  }, [loading, data, zoom, props.map]);\n  return null;\n};\n_s(TrashLayer, \"dFoCCy1rDORHGKfVqxfOt3A/Mgo=\");\n_c = TrashLayer;\nexport default TrashLayer;\nvar _c;\n$RefreshReg$(_c, \"TrashLayer\");","map":{"version":3,"names":["useState","useEffect","axios","mapboxgl","TrashLayer","props","data","setData","loading","setLoading","baseURL","zoom","setZoom","map","on","getZoom","toFixed","fetchData","response","get","error","console","getLayer","addSource","getSource","log","addLayer"],"sources":["C:/Users/quent/Documents/Surfrider/new_map_from_scratch/src/components/TrashLayer.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nconst TrashLayer = props => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const baseURL = 'https://api-dev-plastico.westeurope.cloudapp.azure.com/v1/geojson/-1.05/43.47/-1.0/43.75?entity_type=trash';\r\n  const [zoom, setZoom] = useState(5);\r\n\r\n  useEffect(() => {\r\n    if (!props.map) return;\r\n    props.map.on('move', () => {\r\n      setZoom(props.map.getZoom().toFixed(2));\r\n    });\r\n  }, [props.map]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(baseURL);\r\n        setData(response.data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(error);\r\n        setLoading(true);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  // add source\r\n  useEffect(() => {\r\n      if (loading || !data || !props.map) return ;\r\n\r\n      if(!props.map.getLayer('data')){\r\n        props.map.addSource(\"data\", {\r\n          \"type\": \"geojson\",\r\n          \"data\": data\r\n        });\r\n      } else {\r\n      props.map.getSource('data').setData(data);\r\n      }\r\n    }\r\n    , [data]);\r\n\r\n  // update layer\r\n  useEffect(() => {\r\n\r\n    console.log(\"test\")\r\n\r\n    if (loading || !data || !props.map) return ;\r\n\r\n    if ( !props.map.getLayer('data')){\r\n      props.map.addLayer({\r\n        \"id\": \"data\",\r\n        \"type\": \"heatmap\",\r\n        \"source\": \"data\",\r\n        \"layout\": {\r\n        }\r\n      });\r\n    }\r\n  }\r\n  , [loading, data, zoom, props.map]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default TrashLayer;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAEhC,MAAMC,UAAU,GAAGC,KAAK,IAAI;EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMU,OAAO,GAAG,4GAA4G;EAC5H,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACd,IAAI,CAACI,KAAK,CAACQ,GAAG,EAAE;IAChBR,KAAK,CAACQ,GAAG,CAACC,EAAE,CAAC,MAAM,EAAE,MAAM;MACzBF,OAAO,CAACP,KAAK,CAACQ,GAAG,CAACE,OAAO,EAAE,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC;EACJ,CAAC,EAAE,CAACX,KAAK,CAACQ,GAAG,CAAC,CAAC;EAEfZ,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAG,YAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAACT,OAAO,CAAC;QACzCH,OAAO,CAACW,QAAQ,CAACZ,IAAI,CAAC;QACtBG,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBX,UAAU,CAAC,IAAI,CAAC;MAClB;IACF,CAAC;IACDQ,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAhB,SAAS,CAAC,MAAM;IACZ,IAAIO,OAAO,IAAI,CAACF,IAAI,IAAI,CAACD,KAAK,CAACQ,GAAG,EAAE;IAEpC,IAAG,CAACR,KAAK,CAACQ,GAAG,CAACS,QAAQ,CAAC,MAAM,CAAC,EAAC;MAC7BjB,KAAK,CAACQ,GAAG,CAACU,SAAS,CAAC,MAAM,EAAE;QAC1B,MAAM,EAAE,SAAS;QACjB,MAAM,EAAEjB;MACV,CAAC,CAAC;IACJ,CAAC,MAAM;MACPD,KAAK,CAACQ,GAAG,CAACW,SAAS,CAAC,MAAM,CAAC,CAACjB,OAAO,CAACD,IAAI,CAAC;IACzC;EACF,CAAC,EACC,CAACA,IAAI,CAAC,CAAC;;EAEX;EACAL,SAAS,CAAC,MAAM;IAEdoB,OAAO,CAACI,GAAG,CAAC,MAAM,CAAC;IAEnB,IAAIjB,OAAO,IAAI,CAACF,IAAI,IAAI,CAACD,KAAK,CAACQ,GAAG,EAAE;IAEpC,IAAK,CAACR,KAAK,CAACQ,GAAG,CAACS,QAAQ,CAAC,MAAM,CAAC,EAAC;MAC/BjB,KAAK,CAACQ,GAAG,CAACa,QAAQ,CAAC;QACjB,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,SAAS;QACjB,QAAQ,EAAE,MAAM;QAChB,QAAQ,EAAE,CACV;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EACC,CAAClB,OAAO,EAAEF,IAAI,EAAEK,IAAI,EAAEN,KAAK,CAACQ,GAAG,CAAC,CAAC;EAEnC,OAAO,IAAI;AACb,CAAC;AAAC,GA9DIT,UAAU;AAAA,KAAVA,UAAU;AAgEhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}